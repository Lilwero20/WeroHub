local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

-- ===== CONFIG =====
local CONFIG = {
    DefaultWidth = 680,
    DefaultHeight = 420,
    MobileMaxWidth = 520,
    MobileMaxHeight = 340,
    ThemeColor = Color3.fromRGB(150,65,255),
    PanelBG = Color3.fromRGB(20,20,26),
    PanelAccent = Color3.fromRGB(35,35,45),
    ProfileImageAssetId = "73356133683404", -- reemplaza por tu asset EXACTO si hace falta
    IconInitialPosition = UDim2.new(0, 16, 0, 18),
    IconSizePC = UDim2.new(0,56,0,56),
    IconSizeMobile = UDim2.new(0,64,0,64),
    IconBGColor = Color3.fromRGB(15,15,20),
    IconStrokeColor = Color3.fromRGB(150,65,255),
    IconStrokeThickness = 3,
}

local function getProfileImageSource()
    local id = tostring(CONFIG.ProfileImageAssetId or "")
    if id:sub(1,11) == "rbxassetid://" then return id end
    return "rbxassetid://" .. id
end

-- ===== GUI base =====
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "WeroHubMenu"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = PlayerGui

-- ICON CONTAINER (fondo circular, no transparente)
local IconContainer = Instance.new("Frame", screenGui)
IconContainer.Name = "IconContainer"
IconContainer.AnchorPoint = Vector2.new(0,0)
IconContainer.Position = CONFIG.IconInitialPosition
IconContainer.Size = CONFIG.IconSizePC
IconContainer.BackgroundColor3 = CONFIG.IconBGColor
IconContainer.BackgroundTransparency = 0
IconContainer.ZIndex = 200
local icorner = Instance.new("UICorner", IconContainer)
icorner.CornerRadius = UDim.new(1,0)
local istroke = Instance.new("UIStroke", IconContainer)
istroke.Color = CONFIG.IconStrokeColor
istroke.Thickness = CONFIG.IconStrokeThickness
istroke.Transparency = 0.08

-- Imagen encima
local IconImage = Instance.new("ImageLabel", IconContainer)
IconImage.Name = "IconImage"
IconImage.AnchorPoint = Vector2.new(0.5,0.5)
IconImage.Position = UDim2.new(0.5,0,0.5,0)
IconImage.Size = UDim2.new(0.82,0,0.82,0)
IconImage.BackgroundTransparency = 1
IconImage.Image = getProfileImageSource()
IconImage.ZIndex = 205
local imgCorner = Instance.new("UICorner", IconImage)
imgCorner.CornerRadius = UDim.new(1,0)

-- Botón encima para clicks
local IconButton = Instance.new("ImageButton", IconContainer)
IconButton.Name = "IconButton"
IconButton.AnchorPoint = Vector2.new(0,0)
IconButton.Size = UDim2.new(1,0,1,0)
IconButton.Position = UDim2.new(0,0,0,0)
IconButton.BackgroundTransparency = 1
IconButton.Image = ""
IconButton.AutoButtonColor = false
IconButton.ZIndex = 210

-- OUTER BORDER y MAIN FRAME (inicialmente ocultos)
local OuterBorder = Instance.new("Frame", screenGui)
OuterBorder.Name = "OuterBorder"
OuterBorder.AnchorPoint = Vector2.new(0.5,1) -- bottom-center anchor para quedar encima del icono
OuterBorder.Position = UDim2.new(0.5,0,0.5,0)
OuterBorder.Size = UDim2.new(0, CONFIG.DefaultWidth + 8, 0, CONFIG.DefaultHeight + 8)
OuterBorder.BackgroundTransparency = 1
OuterBorder.ZIndex = 300
local outerCorner = Instance.new("UICorner", OuterBorder); outerCorner.CornerRadius = UDim.new(0,22)
local outerStroke = Instance.new("UIStroke", OuterBorder); outerStroke.Color = CONFIG.ThemeColor; outerStroke.Thickness = 4
OuterBorder.Visible = false

local MainFrame = Instance.new("Frame", screenGui)
MainFrame.Name = "MainFrame"
MainFrame.AnchorPoint = Vector2.new(0.5,1)
MainFrame.Position = UDim2.new(0.5,0,0.5,0)
MainFrame.Size = UDim2.new(0, CONFIG.DefaultWidth, 0, CONFIG.DefaultHeight)
MainFrame.BackgroundColor3 = CONFIG.PanelBG
MainFrame.Visible = false
MainFrame.Active = true
MainFrame.ZIndex = 301
local mainCorner = Instance.new("UICorner", MainFrame); mainCorner.CornerRadius = UDim.new(0,18)
local innerStroke = Instance.new("UIStroke", MainFrame); innerStroke.Color = Color3.fromRGB(0,0,0); innerStroke.Thickness = 1; innerStroke.Transparency = 0.6

-- Header + close
local Header = Instance.new("Frame", MainFrame)
Header.Size = UDim2.new(1,0,0,62)
Header.Position = UDim2.new(0,0,0,0)
Header.BackgroundTransparency = 1
Header.ZIndex = MainFrame.ZIndex + 1

local Title = Instance.new("TextLabel", Header)
Title.Size = UDim2.new(0.6,0,1,0)
Title.Position = UDim2.new(0.18,0,0,0)
Title.BackgroundTransparency = 1
Title.Text = "Nameless Hub"
Title.Font = Enum.Font.GothamBold
Title.TextSize = 24
Title.TextColor3 = Color3.fromRGB(245,245,245)
Title.TextXAlignment = Enum.TextXAlignment.Center
Title.ZIndex = Header.ZIndex + 1

local CloseBtn = Instance.new("TextButton", Header)
CloseBtn.Size = UDim2.new(0,36,0,36)
CloseBtn.Position = UDim2.new(1,-46,0.5,-18)
CloseBtn.Text = "✕"
CloseBtn.Font = Enum.Font.Gotham
CloseBtn.TextColor3 = Color3.fromRGB(240,240,240)
CloseBtn.BackgroundColor3 = Color3.fromRGB(45,45,55)
CloseBtn.ZIndex = Header.ZIndex + 1
local cbCorner = Instance.new("UICorner", CloseBtn); cbCorner.CornerRadius = UDim.new(0,8)
local cbStroke = Instance.new("UIStroke", CloseBtn); cbStroke.Color = Color3.fromRGB(0,0,0); cbStroke.Thickness = 1; cbStroke.Transparency = 0.6

-- Left column (tabs)
local LeftCol = Instance.new("Frame", MainFrame)
LeftCol.Size = UDim2.new(0,170,1,-70)
LeftCol.Position = UDim2.new(0,12,0,70)
LeftCol.BackgroundColor3 = CONFIG.PanelAccent
LeftCol.ZIndex = MainFrame.ZIndex + 2
local lcCorner = Instance.new("UICorner", LeftCol); lcCorner.CornerRadius = UDim.new(0,12)
local lcStroke = Instance.new("UIStroke", LeftCol); lcStroke.Color = Color3.fromRGB(0,0,0); lcStroke.Thickness = 1; lcStroke.Transparency = 0.6
local TabsLayout = Instance.new("UIListLayout", LeftCol)
TabsLayout.Padding = UDim.new(0,12)
TabsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

-- Right view + content holder
local RightView = Instance.new("Frame", MainFrame)
RightView.Position = UDim2.new(0,200,0,70)
RightView.Size = UDim2.new(1, -212, 1, -82)
RightView.BackgroundTransparency = 1
RightView.ClipsDescendants = true
RightView.ZIndex = MainFrame.ZIndex + 3

local ContentHolder = Instance.new("Frame", RightView)
ContentHolder.Size = UDim2.new(1,0,0,0)
ContentHolder.Position = UDim2.new(0,0,0,0)
ContentHolder.BackgroundTransparency = 1
-- Important: ContentHolder must be above MainFrame so its children are visible
ContentHolder.ZIndex = RightView.ZIndex + 2

local ContentList = Instance.new("UIListLayout", ContentHolder)
ContentList.SortOrder = Enum.SortOrder.LayoutOrder
ContentList.Padding = UDim.new(0,12)

local sep = Instance.new("Frame", MainFrame)
sep.Size = UDim2.new(0,6,1,-80)
sep.Position = UDim2.new(0,188,0,70)
sep.BackgroundColor3 = CONFIG.ThemeColor
sep.ZIndex = MainFrame.ZIndex + 1
local sepCorner = Instance.new("UICorner", sep); sepCorner.CornerRadius = UDim.new(0,4)

-- ===== responsive layout =====
local targetW, targetH = CONFIG.DefaultWidth, CONFIG.DefaultHeight

local function adaptLayout()
    local cam = Workspace.CurrentCamera
    local viewport = (cam and cam.ViewportSize) or Vector2.new(1920,1080)
    local vw, vh = viewport.X, viewport.Y
    local isMobile = UserInputService.TouchEnabled or vw <= 900

    if isMobile then
        targetW = math.min(CONFIG.MobileMaxWidth, vw - 24)
        targetH = math.min(CONFIG.MobileMaxHeight, vh - 80)
        LeftCol.Size = UDim2.new(0,140,1,-70)
        RightView.Position = UDim2.new(0,160,0,70)
        RightView.Size = UDim2.new(1, -172, 1, -82)
        IconContainer.Size = CONFIG.IconSizeMobile
        IconImage.Size = UDim2.new(0.82,0,0.82,0)
    else
        targetW = CONFIG.DefaultWidth
        targetH = CONFIG.DefaultHeight
        LeftCol.Size = UDim2.new(0,170,1,-70)
        RightView.Position = UDim2.new(0,200,0,70)
        RightView.Size = UDim2.new(1, -212, 1, -82)
        IconContainer.Size = CONFIG.IconSizePC
        IconImage.Size = UDim2.new(0.82,0,0.82,0)
    end

    MainFrame.Size = UDim2.new(0, targetW, 0, targetH)
    OuterBorder.Size = UDim2.new(0, targetW + 8, 0, targetH + 8)
end

-- ===== scroll logic =====
local isDraggingContent = false
local currentOffset = 0
local velocity = 0
local lastDragTime = 0
local lastDragPos = 0
local maxOffset = 0

local function updateContentHolderSize()
    local totalH = ContentList.AbsoluteContentSize.Y
    ContentHolder.Size = UDim2.new(1,0,0, math.max(12, totalH + 12))
    local viewSize = RightView.AbsoluteSize.Y or 0
    maxOffset = math.max(0, ContentHolder.AbsoluteSize.Y - viewSize)
    currentOffset = math.clamp(currentOffset, -maxOffset, 0)
    ContentHolder.Position = UDim2.new(0,0,0,currentOffset)
end

ContentList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateContentHolderSize)
RightView:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateContentHolderSize)
MainFrame:GetPropertyChangedSignal("Visible"):Connect(function()
    if MainFrame.Visible then
        updateContentHolderSize()
    end
end)

RightView.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        isDraggingContent = true
        lastDragTime = tick()
        if input.Position then lastDragPos = input.Position.Y end
        velocity = 0
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                isDraggingContent = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch and isDraggingContent then
        local delta = input.Delta.Y
        currentOffset = math.clamp(currentOffset + delta, -maxOffset - 200, 200)
        ContentHolder.Position = UDim2.new(0,0,0,currentOffset)
        local now = tick()
        local dt = math.max(0.0001, now - lastDragTime)
        if input.Position then
            velocity = (input.Position.Y - lastDragPos) / dt
            lastDragPos = input.Position.Y
        end
        lastDragTime = now
    elseif input.UserInputType == Enum.UserInputType.MouseMovement and isDraggingContent then
        local delta = input.Delta.Y
        currentOffset = math.clamp(currentOffset + delta, -maxOffset - 200, 200)
        ContentHolder.Position = UDim2.new(0,0,0,currentOffset)
    elseif input.UserInputType == Enum.UserInputType.MouseWheel then
        local delta = input.Position.Z
        currentOffset = math.clamp(currentOffset + delta * 26, -maxOffset, 0)
        ContentHolder.Position = UDim2.new(0,0,0,currentOffset)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
        isDraggingContent = false
    end
end)

RunService.Heartbeat:Connect(function(dt)
    updateContentHolderSize()
    if not isDraggingContent then
        if math.abs(velocity) > 10 then
            currentOffset = math.clamp(currentOffset + velocity * dt * 0.02, -maxOffset - 200, 200)
            velocity = velocity * (1 - math.min(1, dt * 8))
            ContentHolder.Position = UDim2.new(0,0,0,currentOffset)
        else
            velocity = 0
            if currentOffset > 0 then
                currentOffset = currentOffset - (currentOffset * math.min(1, dt * 8))
                if math.abs(currentOffset) < 1 then currentOffset = 0 end
                ContentHolder.Position = UDim2.new(0,0,0,currentOffset)
            elseif currentOffset < -maxOffset then
                local diff = (-maxOffset) - currentOffset
                currentOffset = currentOffset + (diff * math.min(1, dt * 8))
                if math.abs((-maxOffset) - currentOffset) < 1 then currentOffset = -maxOffset end
                ContentHolder.Position = UDim2.new(0,0,0,currentOffset)
            end
        end
    end
end)

-- ===== open/close (menu encima del icono) =====
local opened = false
local function positionMenuAboveIcon()
    local cam = Workspace.CurrentCamera
    if not cam then return UDim2.new(0.5,0,0.5,0) end
    local viewport = cam.ViewportSize
    local vw, vh = viewport.X, viewport.Y

    local iconPos = IconContainer.AbsolutePosition or Vector2.new(16,18)
    local iconSize = IconContainer.AbsoluteSize or Vector2.new(56,56)
    local centerX = iconPos.X + (iconSize.X * 0.5)
    local halfW = (targetW * 0.5)
    local clampedX = math.clamp(centerX, halfW, math.max(halfW, vw - halfW))
    local topY = iconPos.Y
    local pos = UDim2.new(0, clampedX, 0, math.max(8, topY - 12))
    return pos
end

local function openMenu()
    if opened then return end
    opened = true
    adaptLayout()
    OuterBorder.Visible = true
    MainFrame.Visible = true

    local menuPos = positionMenuAboveIcon()
    OuterBorder.Position = menuPos
    MainFrame.Position = menuPos

    OuterBorder.Size = UDim2.new(0, 0, 0, 0)
    MainFrame.Size = UDim2.new(0, 0, 0, 0)

    TweenService:Create(OuterBorder, TweenInfo.new(0.28, Enum.EasingStyle.Quint), {Size = UDim2.new(0, targetW + 8, 0, targetH + 8)}):Play()
    TweenService:Create(MainFrame, TweenInfo.new(0.28, Enum.EasingStyle.Quint), {Size = UDim2.new(0, targetW, 0, targetH)}):Play()

    MainFrame.ZIndex = 301
    OuterBorder.ZIndex = 300
end

local function closeMenu()
    if not opened then return end
    opened = false
    TweenService:Create(MainFrame, TweenInfo.new(0.22, Enum.EasingStyle.Quad), {Size = UDim2.new(0,0,0,0)}):Play()
    TweenService:Create(OuterBorder, TweenInfo.new(0.22, Enum.EasingStyle.Quad), {Size = UDim2.new(0,0,0,0)}):Play()
    task.delay(0.22, function()
        MainFrame.Visible = false
        OuterBorder.Visible = false
    end)
end

IconButton.MouseButton1Click:Connect(function()
    if opened then closeMenu() else openMenu() end
end)
CloseBtn.MouseButton1Click:Connect(closeMenu)

-- ===== draggable icon (mouse & touch) =====
local dragging = false
local dragInput = nil
local dragStartPos = Vector2.new(0,0)
local iconStartAbs = Vector2.new(0,0)

local function clampIconPosition(absPos)
    local cam = Workspace.CurrentCamera
    local viewport = (cam and cam.ViewportSize) or Vector2.new(1920,1080)
    local vw, vh = viewport.X, viewport.Y
    local iconSize = IconContainer.AbsoluteSize or Vector2.new(CONFIG.IconSizePC.X.Offset, CONFIG.IconSizePC.Y.Offset)
    local x = math.clamp(absPos.X, 0, math.max(0, vw - iconSize.X))
    local y = math.clamp(absPos.Y, 0, math.max(0, vh - iconSize.Y))
    return Vector2.new(x, y)
end

IconContainer.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragInput = input
        dragStartPos = input.Position
        iconStartAbs = IconContainer.AbsolutePosition
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
                dragInput = nil
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if not dragging or input ~= dragInput then return end
    local delta = input.Position - dragStartPos
    local newAbs = iconStartAbs + delta
    newAbs = clampIconPosition(newAbs)
    IconContainer.Position = UDim2.new(0, newAbs.X, 0, newAbs.Y)
end)

Workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
    local abs = IconContainer.AbsolutePosition
    local clamped = clampIconPosition(abs)
    IconContainer.Position = UDim2.new(0, clamped.X, 0, clamped.Y)
    adaptLayout()
end)

-- ===== TABS / TOGGLES API =====
local tabs = {}
local activeTabName = nil

local function updateAndResetScroll()
    updateContentHolderSize()
    currentOffset = 0
    ContentHolder.Position = UDim2.new(0,0,0,0)
end

local function selectTab(name)
    if not tabs[name] then return end
    for k,v in pairs(tabs) do
        if v.button then
            TweenService:Create(v.button, TweenInfo.new(0.18), {BackgroundColor3 = CONFIG.PanelAccent}):Play()
            v.button.TextColor3 = Color3.fromRGB(220,220,220)
            v.button.ZIndex = LeftCol.ZIndex + 2
        end
        if v.container then
            v.container.Visible = false
        end
    end

    local selected = tabs[name]
    if selected.button then
        TweenService:Create(selected.button, TweenInfo.new(0.18), {BackgroundColor3 = CONFIG.ThemeColor}):Play()
        selected.button.TextColor3 = Color3.new(1,1,1)
        selected.button.ZIndex = LeftCol.ZIndex + 3
    end
    if selected.container then
        selected.container.Visible = true
        selected.container.ZIndex = ContentHolder.ZIndex + 2
    end

    activeTabName = name
    updateAndResetScroll()
end

local function createTab(name)
    if tabs[name] then return tabs[name].container end
    local btn = Instance.new("TextButton", LeftCol)
    btn.Size = UDim2.new(1, -16, 0, 48)
    btn.BackgroundColor3 = CONFIG.PanelAccent
    btn.Text = name
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 16
    btn.AutoButtonColor = false
    btn.TextColor3 = Color3.fromRGB(220,220,220)
    btn.ZIndex = LeftCol.ZIndex + 2
    local bcorner = Instance.new("UICorner", btn); bcorner.CornerRadius = UDim.new(0,8)

    local contentFrame = Instance.new("Frame", ContentHolder)
    contentFrame.Size = UDim2.new(1,0,0,10)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Visible = false
    contentFrame.ZIndex = ContentHolder.ZIndex + 2

    local layout = Instance.new("UIListLayout", contentFrame)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0,12)
    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        local h = layout.AbsoluteContentSize.Y
        contentFrame.Size = UDim2.new(1,0,0, math.max(12, h + 8))
        updateContentHolderSize()
    end)

    btn.MouseButton1Click:Connect(function() selectTab(name) end)
    tabs[name] = { button = btn, container = contentFrame, layout = layout }
    if not activeTabName then selectTab(name) end
    return contentFrame
end

local function createToggle(...)
    local args = {...}
    local tabName, toggleName, callback

    if #args == 2 and type(args[1]) == "string" and type(args[2]) == "function" then
        toggleName = args[1]; callback = args[2]; tabName = activeTabName
    elseif #args == 3 and type(args[1]) == "string" and type(args[2]) == "string" and type(args[3]) == "function" then
        tabName = args[1]; toggleName = args[2]; callback = args[3]
    else
        warn("createToggle usage: createToggle('Name', callback) or createToggle('Tab','Name',callback)")
        return
    end

    local tab = tabs[tabName]
    if not tab then warn("Tab not found: "..tostring(tabName)); return end

    local toggleFrame = Instance.new("Frame", tab.container)
    toggleFrame.Size = UDim2.new(1,0,0,56)
    toggleFrame.BackgroundColor3 = Color3.fromRGB(30,30,36)
    toggleFrame.ZIndex = tab.container.ZIndex + 1
    local tcorner = Instance.new("UICorner", toggleFrame); tcorner.CornerRadius = UDim.new(0,10)

    local label = Instance.new("TextLabel", toggleFrame)
    label.Size = UDim2.new(0.78,0,1,0)
    label.Position = UDim2.new(0.02,0,0,0)
    label.BackgroundTransparency = 1
    label.Text = toggleName
    label.Font = Enum.Font.Gotham
    label.TextSize = 16
    label.TextColor3 = Color3.fromRGB(230,230,230)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = toggleFrame.ZIndex + 1

    local btn = Instance.new("TextButton", toggleFrame)
    btn.Size = UDim2.new(0,84,0,32)
    btn.Position = UDim2.new(1,-92,0.5,-16)
    btn.BackgroundColor3 = Color3.fromRGB(70,70,78)
    btn.AutoButtonColor = false
    btn.ZIndex = toggleFrame.ZIndex + 2
    local bcorner = Instance.new("UICorner", btn); bcorner.CornerRadius = UDim.new(1,0)

    local indicator = Instance.new("Frame", btn)
    indicator.Size = UDim2.new(0,28,0,28)
    indicator.Position = UDim2.new(0,4,0.5,-14)
    indicator.BackgroundColor3 = Color3.fromRGB(250,250,250)
    indicator.ZIndex = btn.ZIndex + 1
    local icorner = Instance.new("UICorner", indicator); icorner.CornerRadius = UDim.new(1,0)

    local enabled = false
    local function refreshVisual()
        local targetPos = enabled and UDim2.new(1,-32,0.5,-14) or UDim2.new(0,4,0.5,-14)
        local targetBtnColor = enabled and CONFIG.ThemeColor or Color3.fromRGB(70,70,78)
        pcall(function()
            TweenService:Create(indicator, TweenInfo.new(0.22, Enum.EasingStyle.Quad), {Position = targetPos}):Play()
            TweenService:Create(btn, TweenInfo.new(0.22, Enum.EasingStyle.Quad), {BackgroundColor3 = targetBtnColor}):Play()
        end)
    end
end

    local function toggleAction()
        enabled = not enabled
        refreshVisual()
        pcall(callback, enabled)
    end

    btn.MouseButton1Click:Connect(toggleAction)
    btn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            toggleAction()
        end
    end)
    toggleFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            toggleAction()
        end
    end)

    local api = {}
    function api:Set(state)
        enabled = state and true or false
        refreshVisual()
        pcall(callback, enabled)
    end
    function api:Get()
        return enabled
    end

    return api
end

-- ===== ejemplo =====
createTab("Main")
createTab("Settings")
createTab("ESP")
createTab("Info")

createToggle("Main", "Infinite Jump", function(state) print("Infinite Jump:", state) end)
createToggle("Main", "Walk Fling", function(state) print("Walk Fling:", state) end)
createToggle("ESP", "Player ESP", function(state) print("ESP:", state) end)
createToggle("Main", "Auto Laser Cape", function(state) print("Auto Laser Cape (active tab):", state) end)
createToggle("Settings", "Show FPS", function(state) print("Show FPS:", state) end)

-- inicializar layout / scroll
adaptLayout()
updateContentHolderSize()
