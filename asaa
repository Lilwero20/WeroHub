local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Eliminar GUI previa
local existingGui = playerGui:FindFirstChild("BackdoorHub")
if existingGui then existingGui:Destroy() end

-- ScreenGui
local BackdoorHub = Instance.new("ScreenGui")
BackdoorHub.Name = "BackdoorHub"
BackdoorHub.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
BackdoorHub.Parent = playerGui

-- Botón de abrir (igual al original)
local openMenu = Instance.new("ImageButton")
openMenu.Name = "openMenu"
openMenu.Size = UDim2.new(0, 57, 0, 58)
openMenu.Position = UDim2.new(0.051, 0, 0.227, 0)
openMenu.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
openMenu.Image = "rbxassetid://73356133683404"
openMenu.Parent = BackdoorHub
local openCorner = Instance.new("UICorner", openMenu)
openCorner.CornerRadius = UDim.new(0, 100)
local openStroke = Instance.new("UIStroke", openMenu)
openStroke.Thickness = 3.2
openStroke.Color = Color3.fromRGB(145, 33, 255)

-- CONTENEDOR PRINCIPAL (tamaño original)
local Background = Instance.new("Frame")
Background.Name = "Background"
Background.Size = UDim2.new(0, 381, 0, 267)
Background.Position = UDim2.new(0.21321, 0, 0.14293, 0)
Background.BackgroundColor3 = Color3.fromRGB(23, 27, 35)
Background.Visible = false
Background.Parent = BackdoorHub

-- Sombra (invisible por defecto)
local Shadow = Instance.new("Frame")
Shadow.Name = "Shadow"
Shadow.Size = Background.Size
Shadow.Position = Background.Position
Shadow.BackgroundColor3 = Color3.fromRGB(0,0,0)
Shadow.BackgroundTransparency = 0.85
Shadow.ZIndex = Background.ZIndex - 1
Shadow.Visible = false
Shadow.Parent = BackdoorHub
local shadowCorner = Instance.new("UICorner", Shadow)
shadowCorner.CornerRadius = UDim.new(0, 18)

local bgCorner = Instance.new("UICorner", Background)
bgCorner.CornerRadius = UDim.new(0, 18)
local bgStroke = Instance.new("UIStroke", Background)
bgStroke.Thickness = 3.2
bgStroke.Color = Color3.fromRGB(145, 33, 255)

local bgGradient = Instance.new("UIGradient", Background)
bgGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(28,31,40)), ColorSequenceKeypoint.new(1, Color3.fromRGB(21,23,30))}
bgGradient.Rotation = 90

-- Barra de título
local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Size = UDim2.new(1, 0, 0, 48)
TitleBar.BackgroundTransparency = 1
TitleBar.Parent = Background

local Title = Instance.new("TextLabel")
Title.Text = "Backdoor Hub"
Title.Size = UDim2.new(0, 200, 0, 47)
Title.Position = UDim2.new(0.236, 0, 0, 0)
Title.BackgroundTransparency = 1
Title.TextScaled = true
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.DenkOne
Title.Parent = TitleBar

-- Botón de cerrar
local closeMenu = Instance.new("TextButton")
closeMenu.Name = "closeMenu"
closeMenu.Text = "X"
closeMenu.Size = UDim2.new(0, 37, 0, 36)
closeMenu.Position = UDim2.new(0.869, 0, 0.125, 0)
closeMenu.BackgroundColor3 = Color3.fromRGB(40, 42, 55)
closeMenu.TextColor3 = Color3.fromRGB(255, 255, 255)
closeMenu.TextScaled = true
closeMenu.Font = Enum.Font.SourceSans
closeMenu.Parent = TitleBar
local closeCorner = Instance.new("UICorner", closeMenu)

-- Línea decorativa separadora
local Line = Instance.new("Frame")
Line.Name = "Line"
Line.Size = UDim2.new(0.935, 0, 0, 3)
Line.Position = UDim2.new(0.03, 0, 0.161, 0)
Line.BackgroundColor3 = Color3.fromRGB(145, 33, 255)
Line.Parent = Background
local lineCorner = Instance.new("UICorner", Line)

-- Contenedor interior
local Content = Instance.new("Frame")
Content.Name = "Content"
Content.Size = UDim2.new(1, -24, 1, -84)
Content.Position = UDim2.new(0, 12, 0, 68)
Content.BackgroundTransparency = 1
Content.Parent = Background

-- COL: Tabs (izquierda)
local TabsFrame = Instance.new("Frame")
TabsFrame.Name = "TabsFrame"
TabsFrame.Size = UDim2.new(0, 96, 1, 0)
TabsFrame.Position = UDim2.new(0, 0, 0, 0)
TabsFrame.BackgroundColor3 = Color3.fromRGB(29,31,38)
TabsFrame.Parent = Content
local tabsCorner = Instance.new("UICorner", TabsFrame)
tabsCorner.CornerRadius = UDim.new(0, 10)
local tabsStroke = Instance.new("UIStroke", TabsFrame)
tabsStroke.Thickness = 1
tabsStroke.Color = Color3.fromRGB(50,50,60)

local TabsList = Instance.new("ScrollingFrame")
TabsList.Size = UDim2.new(1, -12, 1, -12)
TabsList.Position = UDim2.new(0, 6, 0, 6)
TabsList.BackgroundTransparency = 1
TabsList.ScrollBarThickness = 6
TabsList.VerticalScrollBarInset = Enum.ScrollBarInset.Always
TabsList.AutomaticCanvasSize = Enum.AutomaticSize.Y
TabsList.Parent = TabsFrame

local tabsLayout = Instance.new("UIListLayout", TabsList)
tabsLayout.SortOrder = Enum.SortOrder.LayoutOrder
tabsLayout.Padding = UDim.new(0,8)
local tabsPadding = Instance.new("UIPadding", TabsList)
tabsPadding.PaddingTop = UDim.new(0,6)

-- COL: Items (derecha)
local ItemsFrame = Instance.new("Frame")
ItemsFrame.Name = "ItemsFrame"
ItemsFrame.Size = UDim2.new(1, -108, 1, 0)
ItemsFrame.Position = UDim2.new(0, 108, 0, 0)
ItemsFrame.BackgroundColor3 = Color3.fromRGB(23,27,33)
ItemsFrame.Parent = Content
local itemsCorner = Instance.new("UICorner", ItemsFrame)
itemsCorner.CornerRadius = UDim.new(0, 10)
local itemsStroke = Instance.new("UIStroke", ItemsFrame)
itemsStroke.Thickness = 1
itemsStroke.Color = Color3.fromRGB(40,40,48)

local ItemsList = Instance.new("ScrollingFrame")
ItemsList.Size = UDim2.new(1, -12, 1, -12)
ItemsList.Position = UDim2.new(0, 6, 0, 6)
ItemsList.BackgroundTransparency = 1
ItemsList.ScrollBarThickness = 8
ItemsList.VerticalScrollBarInset = Enum.ScrollBarInset.Always
ItemsList.AutomaticCanvasSize = Enum.AutomaticSize.Y
ItemsList.Parent = ItemsFrame

local itemsLayout = Instance.new("UIListLayout", ItemsList)
itemsLayout.SortOrder = Enum.SortOrder.LayoutOrder
itemsLayout.Padding = UDim.new(0,10)
local itemsPadding = Instance.new("UIPadding", ItemsList)
itemsPadding.PaddingTop = UDim.new(0,8)

-- Evitar que tocar el scroller active toggles
local function makeScrollSafe(scrollingFrame)
    local isDragging = false
    local dragStartPos
    local dragThreshold = 8

    scrollingFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragStartPos = input.Position
            isDragging = false
        end
    end)

    scrollingFrame.InputChanged:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) and dragStartPos then
            local pos = input.Position
            if (pos - dragStartPos).Magnitude > dragThreshold then
                isDragging = true
            end
        end
    end)

    scrollingFrame.InputEnded:Connect(function(input)
        dragStartPos = nil
        delay(0.06, function() isDragging = false end)
    end)

    return function()
        return isDragging
    end
end

local tabsIsDragging = makeScrollSafe(TabsList)
local itemsIsDragging = makeScrollSafe(ItemsList)

-- SISTEMA DE TABS (sin destruir elementos al cambiar)
local Tabs = {}
local currentTab = nil

local function refreshCanvasSizes()
    TabsList.CanvasSize = UDim2.new(0,0,0,tabsLayout.AbsoluteContentSize.Y + 12)
    ItemsList.CanvasSize = UDim2.new(0,0,0,itemsLayout.AbsoluteContentSize.Y + 12)
end

local function clearItemsListWithoutDestroy()
    for _, c in ipairs(ItemsList:GetChildren()) do
        if not (c:IsA("UIListLayout") or c:IsA("UIPadding")) then
            c.Parent = nil -- detach but don't destroy
        end
    end
end

local function selectTab(tab)
    if not tab then return end
    currentTab = tab
    -- Visual de tabs
    for _, v in ipairs(TabsList:GetChildren()) do
        if v:IsA("TextButton") then
            v.BackgroundColor3 = (v.Name == tab.name) and Color3.fromRGB(45,40,70) or Color3.fromRGB(35,36,41)
        end
    end
    -- Detach items actuales
    clearItemsListWithoutDestroy()
    -- Re-parent los items de la pestaña seleccionada
    for _, item in ipairs(tab.items) do
        item.Parent = ItemsList
    end
    refreshCanvasSizes()
end

local function createTabLocal(name)
    local btn = Instance.new("TextButton")
    btn.Name = name
    btn.Text = name
    btn.Size = UDim2.new(1, -12, 0, 36)
    btn.BackgroundColor3 = Color3.fromRGB(35,36,41)
    btn.TextColor3 = Color3.fromRGB(230,230,230)
    btn.Font = Enum.Font.SourceSans
    btn.TextScaled = true
    btn.Parent = TabsList
    local btnCorner = Instance.new("UICorner", btn)
    btnCorner.CornerRadius = UDim.new(0,8)
    local btnStroke = Instance.new("UIStroke", btn)
    btnStroke.Thickness = 1
    btnStroke.Color = Color3.fromRGB(40,40,46)

    -- Hover
    btn.MouseEnter:Connect(function()
        if currentTab and currentTab.name == name then return end
        TweenService:Create(btn, TweenInfo.new(0.12), {BackgroundColor3 = Color3.fromRGB(45,40,70)}):Play()
    end)
    btn.MouseLeave:Connect(function()
        if currentTab and currentTab.name == name then
            btn.BackgroundColor3 = Color3.fromRGB(45,40,70)
        else
            TweenService:Create(btn, TweenInfo.new(0.12), {BackgroundColor3 = Color3.fromRGB(35,36,41)}):Play()
        end
    end)

    local tab = { name = name, button = btn, items = {} }
    Tabs[name] = tab
    btn.MouseButton1Click:Connect(function()
        selectTab(tab)
    end)
    -- seleccionar la primera creada
    if not currentTab then selectTab(tab) end
    refreshCanvasSizes()
    return tab
end

-- CREACION DE ELEMENTOS (toggles, botones) -- preservando elementos al cambiar
local function makeToggleElement(labelText, defaultState, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -12, 0, 44)
    container.BackgroundTransparency = 1

    local lbl = Instance.new("TextLabel", container)
    lbl.Size = UDim2.new(0.72, 0, 1, 0)
    lbl.Position = UDim2.new(0, 8, 0, 0)
    lbl.BackgroundTransparency = 1
    lbl.Text = labelText
    lbl.TextColor3 = Color3.fromRGB(235,235,235)
    lbl.Font = Enum.Font.SourceSans
    lbl.TextScaled = true

    local toggleBtn = Instance.new("Frame", container)
    toggleBtn.Size = UDim2.new(0,66,0,30)
    toggleBtn.Position = UDim2.new(1, -76, 0.5, -15)
    toggleBtn.BackgroundColor3 = Color3.fromRGB(50,50,60)
    toggleBtn.ClipsDescendants = true
    local toggleCorner = Instance.new("UICorner", toggleBtn)
    toggleCorner.CornerRadius = UDim.new(0,16)
    local toggleStroke = Instance.new("UIStroke", toggleBtn)
    toggleStroke.Thickness = 1
    toggleStroke.Color = Color3.fromRGB(30,30,36)

    local knob = Instance.new("Frame", toggleBtn)
    knob.Size = UDim2.new(0,26,0,26)
    knob.Position = UDim2.new(0,4,0,2)
    knob.BackgroundColor3 = Color3.fromRGB(245,245,245)
    local knobCorner = Instance.new("UICorner", knob)
    knobCorner.CornerRadius = UDim.new(0,13)

    local isOn = defaultState or false
    local debounce = false

    local function updateVisual()
        if isOn then
            TweenService:Create(knob, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {Position = UDim2.new(1, -30, 0, 2)}):Play()
            TweenService:Create(toggleBtn, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(145,33,255)}):Play()
        else
            TweenService:Create(knob, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {Position = UDim2.new(0, 4, 0, 2)}):Play()
            TweenService:Create(toggleBtn, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(50,50,60)}):Play()
        end
    end
    updateVisual()

    local function tryToggle()
        if debounce then return end
        if tabsIsDragging() or itemsIsDragging() then return end
        debounce = true
        isOn = not isOn
        pcall(callback, isOn)
        updateVisual()
        delay(0.08, function() debounce = false end)
    end

    -- Caja de interacción (hitbox)
    local hitbox = Instance.new("TextButton", container)
    hitbox.Size = UDim2.new(1, 0, 1, 0)
    hitbox.BackgroundTransparency = 1
    hitbox.Text = ""
    hitbox.AutoButtonColor = false
    hitbox.MouseButton1Click:Connect(tryToggle)

    -- touch directamente en el toggle
    toggleBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            tryToggle()
        end
    end)

    return container, function() return isOn end
end

local function makeButtonElement(labelText, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -12, 0, 44)
    container.BackgroundTransparency = 1

    local btn = Instance.new("TextButton", container)
    btn.Size = UDim2.new(1, 0, 1, 0)
    btn.Text = labelText
    btn.Font = Enum.Font.SourceSans
    btn.TextScaled = true
    btn.BackgroundColor3 = Color3.fromRGB(45,45,55)
    btn.TextColor3 = Color3.fromRGB(235,235,235)
    local btnCorner = Instance.new("UICorner", btn)
    btnCorner.CornerRadius = UDim.new(0,8)

    btn.MouseButton1Click:Connect(function()
        if itemsIsDragging() then return end
        pcall(callback)
    end)

    btn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            if itemsIsDragging() then return end
            pcall(callback)
        end
    end)

    return container
end

-- NOTIFICACIONES (toast) mejoradas con barra de progreso
local Notifications = {}
local NotifyHolder = Instance.new("Frame")
NotifyHolder.Size = UDim2.new(0, 300, 0, 240)
NotifyHolder.Position = UDim2.new(1, -320, 0, 50)
NotifyHolder.BackgroundTransparency = 1
NotifyHolder.Parent = BackdoorHub
local notifyLayout = Instance.new("UIListLayout", NotifyHolder)
notifyLayout.Padding = UDim.new(0, 8)
notifyLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
notifyLayout.VerticalAlignment = Enum.VerticalAlignment.Top

local function spawnNotify(titleText, bodyText, duration)
    duration = duration or 2.8
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 280, 0, 76)
    frame.BackgroundColor3 = Color3.fromRGB(39,41,50)
    frame.AnchorPoint = Vector2.new(1,0)
    frame.Position = UDim2.new(1, 20, 0, 0)
    frame.Parent = NotifyHolder
    local fCorner = Instance.new("UICorner", frame)
    fCorner.CornerRadius = UDim.new(0, 10)
    local fStroke = Instance.new("UIStroke", frame)
    fStroke.Thickness = 1
    fStroke.Color = Color3.fromRGB(60, 60, 70)

    local title = Instance.new("TextLabel", frame)
    title.Text = titleText
    title.Size = UDim2.new(1, -20, 0, 24)
    title.Position = UDim2.new(0, 12, 0, 8)
    title.BackgroundTransparency = 1
    title.TextColor3 = Color3.fromRGB(240,240,240)
    title.Font = Enum.Font.DenkOne
    title.TextScaled = true

    local body = Instance.new("TextLabel", frame)
    body.Text = bodyText
    body.Size = UDim2.new(1, -20, 0, 30)
    body.Position = UDim2.new(0, 12, 0, 28)
    body.BackgroundTransparency = 1
    body.TextColor3 = Color3.fromRGB(200,200,200)
    body.Font = Enum.Font.SourceSans
    body.TextWrapped = true
    body.TextSize = 14

    -- progress bar (pequeña barra abajo)
    local progressBG = Instance.new("Frame", frame)
    progressBG.Size = UDim2.new(1, -12, 0, 6)
    progressBG.Position = UDim2.new(0, 6, 1, -14)
    progressBG.BackgroundColor3 = Color3.fromRGB(30,30,36)
    local pbCorner = Instance.new("UICorner", progressBG)
    pbCorner.CornerRadius = UDim.new(0, 6)

    local progress = Instance.new("Frame", progressBG)
    progress.Size = UDim2.new(1, 0, 1, 0)
    progress.Position = UDim2.new(0, 0, 0, 0)
    progress.BackgroundColor3 = Color3.fromRGB(145,33,255)
    local pCorner = Instance.new("UICorner", progress)
    pCorner.CornerRadius = UDim.new(0, 6)

    -- anim in
    frame.Position = UDim2.new(1, 320, 0, 0)
    TweenService:Create(frame, TweenInfo.new(0.36, Enum.EasingStyle.Quad), {Position = UDim2.new(1, 0, 0, 0)}):Play()

    -- tween progress linear
    TweenService:Create(progress, TweenInfo.new(duration, Enum.EasingStyle.Linear), {Size = UDim2.new(0, 0, 1, 0)}):Play()

    delay(duration, function()
        TweenService:Create(frame, TweenInfo.new(0.28, Enum.EasingStyle.Quad), {Position = UDim2.new(1, 320, 0, 0)}):Play()
        task.wait(0.32)
        frame:Destroy()
    end)
end

local function createNotify(id, title, text, duration)
    Notifications[id] = {title = title, text = text, duration = duration}
end
local function useNotify(id)
    local d = Notifications[id]
    if d then spawnNotify(d.title, d.text, d.duration) end
end

-- API pública (funciones que puedes llamar dentro del mismo LocalScript)
local public = {}
public.createTab = createTabLocal
public.createToggle = function(name, defaultOrCallback, maybeCallback)
    local callback
    local default = false
    if type(defaultOrCallback) == "function" then
        callback = defaultOrCallback
    else
        default = defaultOrCallback or false
        callback = maybeCallback
    end
    if not next(Tabs) then public.createTab("Main") end
    local tabToUse = currentTab or Tabs["Main"]
    local elem, getter = makeToggleElement(name, default, callback)
    -- almacenar el elemento en la pestaña (pero no destruirlo cuando se cambie de tab)
    if tabToUse then
        tabToUse.items[#tabToUse.items + 1] = elem
    end
    -- si la pestaña es la actual, mostrarlo
    if currentTab == tabToUse then
        elem.Parent = ItemsList
    else
        elem.Parent = nil
    end
    refreshCanvasSizes()
    return getter
end
public.createButton = function(name, callback)
    if not next(Tabs) then public.createTab("Main") end
    local elem = makeButtonElement(name, callback)
    if currentTab then currentTab.items[#currentTab.items + 1] = elem end
    if currentTab then elem.Parent = ItemsList else elem.Parent = nil end
    refreshCanvasSizes()
    return elem
end
public.createNotify = createNotify
public.useNotify = useNotify

-- Draggable window (TitleBar)
local dragging = false
local dragInput = nil
local dragStart = nil
local startPos = nil

TitleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragInput = input
        dragStart = input.Position
        startPos = Background.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
                dragInput = nil
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and dragInput and input == dragInput then
        local delta = input.Position - dragStart
        Background.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        Shadow.Position = Background.Position
    end
end)

-- Abrir / Cerrar con animación y control de sombra
openMenu.MouseButton1Click:Connect(function()
    Shadow.Visible = true
    Background.Visible = true
    local start = Background.Position
    Background.Position = UDim2.new(start.X.Scale, start.X.Offset, start.Y.Scale, start.Y.Offset + 12)
    Shadow.Position = Background.Position
    TweenService:Create(Background, TweenInfo.new(0.26, Enum.EasingStyle.Quad), {Position = start}):Play()
end)

closeMenu.MouseButton1Click:Connect(function()
    local target = UDim2.new(Background.Position.X.Scale, Background.Position.X.Offset, Background.Position.Y.Scale, Background.Position.Y.Offset + 12)
    local t = TweenService:Create(Background, TweenInfo.new(0.16, Enum.EasingStyle.Quad), {Position = target})
    t:Play()
    t.Completed:Connect(function()
        Background.Visible = false
        Shadow.Visible = false
    end)
end)

-- Inicializar: crear pestaña Main
public.createTab("Main")
-- Ejemplos
public.createToggle("Air Walk", function(state) print("Estado:", state) end)
public.createButton("Press me", function() print("Hello") end)
public.createToggle("Air Walk", function(state) print("Estado:", state) end)
public.createButton("Press me", function() print("Hello") end)
public.createToggle("Air Walk", function(state) print("Estado:", state) end)
public.createButton("Press me", function() print("Hello") end)
public.createNotify("Notify", "Presiona el toggle para usarlo", 2)
public.useNotify("Notify")

-- Exponer funciones en el entorno del LocalScript
createTab = public.createTab
createToggle = public.createToggle
createButton = public.createButton
createNotify = public.createNotify
useNotify = public.useNotify
