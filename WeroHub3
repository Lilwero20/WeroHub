local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "WeroHub",
    Icon = 89001596756285, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Loading WeroHub",
    LoadingSubtitle = "by Wero",
    Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local TeleportTab = Window:CreateTab("Teleport", 4483362458) -- Title, Image

local Input = TeleportTab:CreateInput({
    Name = "TP to Player",
    CurrentValue = "",
    PlaceholderText = "Input Placeholder",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        local Players = game:GetService("Players")
        local TweenService = game:GetService("TweenService")
        
        local targetPlayerName = Text
        local localPlayer = Players.LocalPlayer
        
        local function flyToPlayer(targetPlayerName)
            local targetPlayer = Players:FindFirstChild(targetPlayerName)
            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
                local character = localPlayer.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    local humanoidRootPart = character.HumanoidRootPart

                    -- Subir 10 studs primero
                    humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 10, 0)

                    -- Volar hacia arriba del jugador (unos 10 studs arriba)
                    local aboveTargetPosition = targetPosition + Vector3.new(0, 10, 0)

                    local distance = (aboveTargetPosition - humanoidRootPart.Position).Magnitude
                    local speed = 250
                    local tweenInfo = TweenInfo.new(distance / speed, Enum.EasingStyle.Linear)
                    local flyTween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(aboveTargetPosition)})
                    flyTween:Play()

                    flyTween.Completed:Connect(function()
                        -- Cuando llegue arriba, bajamos sobre el jugador
                        local descendTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.In)
                        local descendTween = TweenService:Create(humanoidRootPart, descendTweenInfo, {CFrame = CFrame.new(targetPosition)})
                        descendTween:Play()
                    end)
                end
            end
        end
        
        flyToPlayer(targetPlayerName)
    end,
})



 local Toggle = TeleportTab:CreateToggle({
    Name = "Tp to Fruit",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        local Players = game:GetService("Players")
        local TweenService = game:GetService("TweenService")
        local Workspace = game:GetService("Workspace")

        local localPlayer = Players.LocalPlayer

        local function flyToFruit()
            local closestFruit
            local closestDistance = math.huge

            for _, fruit in pairs(Workspace:GetChildren()) do
            if fruit:IsA("Tool") and fruit:FindFirstChild("Handle") then
                local distance = (fruit.Handle.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
                if distance < closestDistance then
                closestDistance = distance
                closestFruit = fruit
                end
            end
            end

            if closestFruit then
            local targetPosition = closestFruit.Handle.Position
            local character = localPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local humanoidRootPart = character.HumanoidRootPart
                local distance = (targetPosition - humanoidRootPart.Position).Magnitude
                local speed = 250
                local tweenInfo = TweenInfo.new(distance / speed, Enum.EasingStyle.Linear)
                local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPosition)})
                tween:Play()
            end
            end
        end

        if Value then
            flyToFruit()
        end
    end,
 })

 
 local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image

 local Toggle = PlayerTab:CreateToggle({
    Name = "Inf Energy",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        local Players = game:GetService("Players")
        local localPlayer = Players.LocalPlayer
        local energyConnection

        if Value then
            energyConnection = localPlayer.Character.Energy.Changed:Connect(function()
            localPlayer.Character.Energy.Value = localPlayer.Character.Energy.MaxValue
            end)
        else
            if energyConnection then
            energyConnection:Disconnect()
            energyConnection = nil
            end
        end
    end,
 })
local Toggle = PlayerTab:CreateToggle({
    Name = "Inf Health",
    CurrentValue = false,
    Flag = "Toggle2", -- Ensure this flag is unique
    Callback = function(Value)
        local Players = game:GetService("Players")
        local localPlayer = Players.LocalPlayer
        local healthConnection

        if Value then
            healthConnection = localPlayer.Character.Humanoid.HealthChanged:Connect(function()
                localPlayer.Character.Humanoid.Health = localPlayer.Character.Humanoid.MaxHealth
            end)
        else
            if healthConnection then
                healthConnection:Disconnect()
                healthConnection = nil
            end
        end
    end,
})

local Toggle = PlayerTab:CreateToggle({
    Name = "Auto Farm",
    CurrentValue = false,
    Flag = "Toggle3", -- Ensure this flag is unique
    Callback = function(Value)
        local Players = game:GetService("Players")
        local TweenService = game:GetService("TweenService")
        local Workspace = game:GetService("Workspace")
        local localPlayer = Players.LocalPlayer
        local autoFarmConnection

        local function autoFarm()
            while Value do
                local closestEnemy
                local closestDistance = math.huge

                for _, enemy in pairs(Workspace.Enemies:GetChildren()) do
                    if enemy:FindFirstChild("HumanoidRootPart") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                        local distance = (enemy.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
                        if distance < closestDistance then
                            closestDistance = distance
                            closestEnemy = enemy
                        end
                    end
                end

                if closestEnemy then
                    local targetPosition = closestEnemy.HumanoidRootPart.Position
                    local character = localPlayer.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        local humanoidRootPart = character.HumanoidRootPart
                        local distance = (targetPosition - humanoidRootPart.Position).Magnitude
                        local speed = 250
                        humanoidRootPart.CFrame = CFrame.new(targetPosition + Vector3.new(0, 10, 0)) -- Fly above the enemy
                        localPlayer.Character:FindFirstChildOfClass("Tool").Handle.Size = Vector3.new(10, 10, 10) -- Increase hitbox size
                        local tweenInfo = TweenInfo.new(distance / speed, Enum.EasingStyle.Linear)
                        local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPosition)})
                        tween:Play()
                        while tween.PlaybackState == Enum.PlaybackState.Playing do
                            localPlayer.Character:FindFirstChildOfClass("Tool"):Activate()
                            wait(0.1)
                        end
                        tween.Completed:Wait()
                        -- Attack the enemy
                        localPlayer.Character:FindFirstChildOfClass("Tool"):Activate()
                    end
                end
                wait(1) -- Adjust the wait time as needed
            end
        end

        if Value then
            autoFarmConnection = game:GetService("RunService").Heartbeat:Connect(autoFarm)
        else
            if autoFarmConnection then
                autoFarmConnection:Disconnect()
                autoFarmConnection = nil
            end
        end
    end,
})

local ScriptsTab = Window:CreateTab("Scripts", 4483362458) -- Title, Image

local Button = ScriptsTab:CreateButton({
    Name = "Infinity yield",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end,
 })

 local Button = ScriptsTab:CreateButton({
    Name = "Dex",
    Callback = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/FeMbE4xS"))()
    end,
 })

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local characterTab = Window:CreateTab("Modificar Características", 4483362458) -- Título, Imagen (usamos un ID de ejemplo para imagen)

-- Modificar Vida (MaxHealth)
local healthSlider = characterTab:CreateSlider({
    Name = "Modificar Vida",
    Range = {0, 500},
    Increment = 10,
    Suffix = "Vida",
    CurrentValue = humanoid.MaxHealth,
    Flag = "HealthSlider", 
    Callback = function(value)
        humanoid.MaxHealth = value
        humanoid.Health = value  -- Asegurarse de que la salud se ajuste al nuevo máximo
    end,
})

-- Modificar WalkSpeed (Velocidad de caminata)
local speedSlider = characterTab:CreateSlider({
    Name = "Modificar WalkSpeed",
    Range = {0, 100},
    Increment = 1,
    Suffix = "Velocidad",
    CurrentValue = humanoid.WalkSpeed,
    Flag = "SpeedSlider", 
    Callback = function(value)
        humanoid.WalkSpeed = value
    end,
})

-- Modificar JumpPower (Potencia del salto)
local jumpSlider = characterTab:CreateSlider({
    Name = "Modificar JumpPower",
    Range = {0, 200},
    Increment = 1,
    Suffix = "Potencia de Salto",
    CurrentValue = humanoid.JumpPower,
    Flag = "JumpSlider", 
    Callback = function(value)
        humanoid.JumpPower = value
    end,
})

-- Agregar accesorios por ID
local accessoryInput = characterTab:CreateInput({
    Name = "ID de Accesorio",
    PlaceholderText = "Pon el ID del accesorio",
    RemoveTextAfterFocusLost = false,
    Callback = function(id)
        local accessory = Instance.new("Accessory")
        local handle = Instance.new("Part")
        handle.Size = Vector3.new(1, 1, 1)
        handle.Position = character.Head.Position + Vector3.new(0, 1, 0) -- Posición encima de la cabeza
        handle.Anchored = false
        handle.Parent = accessory
        accessory.Parent = character

        -- Intentar cargar el accesorio desde el ID proporcionado
        local success, asset = pcall(function()
            return game:GetService("InsertService"):LoadAsset(id):GetChildren()[1]
        end)

        if success and asset then
            asset.Parent = handle
            handle.CFrame = character.Head.CFrame * CFrame.new(0, 1, 0) -- Ajuste para colocar el accesorio sobre la cabeza
        else
            warn("No se pudo cargar el accesorio con el ID proporcionado.")
        end
    end,
})

-- Crear botón para curarse al máximo
local healButton = characterTab:CreateButton({
    Name = "Curarse al Máximo",
    Callback = function()
        humanoid.Health = humanoid.MaxHealth  -- Restaura la salud del jugador al máximo
    end,
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Crear el botón
local Button = TeleportTab:CreateButton({
    Name = "Dar Herramientas",
    Callback = function()
        local player = Players.LocalPlayer
        local backpack = player:WaitForChild("Backpack")
        local buildingParts = ReplicatedStorage:WaitForChild("BuildingParts")
        
        -- Lista de herramientas que queremos clonar
        local herramientas = {"BindTool", "PaintingTool", "PropertiesTool", "ScalingTool", "TrowelTool"}
        
        -- Dar cada herramienta
        for _, toolName in ipairs(herramientas) do
            local tool = buildingParts:FindFirstChild(toolName)
            if tool then
                local clonedTool = tool:Clone()
                clonedTool.Parent = backpack
            end
        end
    end,
})

local Players = game:GetService("Players")

local Input = TeleportTab:CreateInput({
    Name = "Agregar Oro",
    CurrentValue = "",
    PlaceholderText = "Cantidad de oro",
    RemoveTextAfterFocusLost = true,
    Flag = "InputOro",
    Callback = function(Text)
        local player = Players.LocalPlayer
        local dataFolder = player:FindFirstChild("Data")
        
        if dataFolder then
            local gold = dataFolder:FindFirstChild("Gold")
            if gold and gold:IsA("IntValue") then
                local amount = tonumber(Text)
                if amount then
                    gold.Value = gold.Value + amount
                end
            end
        end
    end,
})

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")

local Button = TeleportTab:CreateButton({
    Name = "Ir a GoldenChest",
    Callback = function()
        local localPlayer = Players.LocalPlayer
        local character = localPlayer.Character

        if character and character:FindFirstChild("HumanoidRootPart") then
            local humanoidRootPart = character.HumanoidRootPart
            local targetPart = Workspace:WaitForChild("BoatStages"):WaitForChild("NormalStages"):WaitForChild("TheEnd"):WaitForChild("GoldenChest"):WaitForChild("Trigger")

            if targetPart then
                -- PRIMER PASO: Subir 20 studs localmente (pequeño salto)
                local upTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
                local upGoal = {CFrame = humanoidRootPart.CFrame * CFrame.new(0, 20, 0)}
                local upTween = TweenService:Create(humanoidRootPart, upTweenInfo, upGoal)
                upTween:Play()

                upTween.Completed:Connect(function()
                    -- SEGUNDO PASO: Volar hacia 20 studs encima del Trigger
                    local targetAbove = targetPart.Position + Vector3.new(0, 20, 0)
                    local distance = (targetAbove - humanoidRootPart.Position).Magnitude
                    local speed = 250
                    local flyTime = distance / speed

                    local flyTweenInfo = TweenInfo.new(flyTime, Enum.EasingStyle.Linear)
                    local flyTween = TweenService:Create(humanoidRootPart, flyTweenInfo, {CFrame = CFrame.new(targetAbove)})
                    flyTween:Play()

                    flyTween.Completed:Connect(function()
                        -- TERCER PASO: Bajar 3 studs hasta justo encima de la Part
                        local finalPosition = targetPart.Position + Vector3.new(0, 3, 0)
                        local descendDistance = (finalPosition - humanoidRootPart.Position).Magnitude
                        local descendSpeed = 100
                        local descendTime = descendDistance / descendSpeed

                        local descendTweenInfo = TweenInfo.new(descendTime, Enum.EasingStyle.Sine, Enum.EasingDirection.In)
                        local descendTween = TweenService:Create(humanoidRootPart, descendTweenInfo, {CFrame = CFrame.new(finalPosition)})
                        descendTween:Play()
                    end)
                end)
            end
        end
    end,
})

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local Button = TeleportTab:CreateButton({
    Name = "Activar Rebote Extremo",
    Callback = function()
        local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()

        -- Función que lanza solo a los demás jugadores
        local function onTouch(otherPart)
            local otherCharacter = otherPart:FindFirstAncestorWhichIsA("Model")
            local otherPlayer = Players:GetPlayerFromCharacter(otherCharacter)

            if otherPlayer and otherPlayer ~= localPlayer and otherCharacter:FindFirstChild("HumanoidRootPart") then
                -- Verifica que NO sea el propio jugador
                local hrp = otherCharacter:FindFirstChild("HumanoidRootPart")

                -- Verificamos que no ya tenga un BodyVelocity activo
                if hrp and not hrp:FindFirstChild("LaunchForce") then
                    local bodyVelocity = Instance.new("BodyVelocity")
                    bodyVelocity.Velocity = Vector3.new(0, 10000000, 0) -- 10 millones de studs hacia arriba
                    bodyVelocity.MaxForce = Vector3.new(1e9, 1e9, 1e9)
                    bodyVelocity.P = 1e9
                    bodyVelocity.Name = "LaunchForce"
                    bodyVelocity.Parent = hrp

                    -- Limpiar después de 1 segundo
                    game:GetService("Debris"):AddItem(bodyVelocity, 1)
                end
            end
        end

        -- Conectamos el evento a todas las partes del personaje
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Touched:Connect(onTouch)
            end
        end
    end,
})

local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

TeleportTab:CreateButton({
    Name = "Lluvia de Noobs",
    Callback = function()
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                for i = 1, 10 do
                    task.delay(i * 0.1, function()
                        local dummy = Instance.new("Part")
                        dummy.Size = Vector3.new(2, 2, 2)
                        dummy.Position = player.Character.HumanoidRootPart.Position + Vector3.new(math.random(-10, 10), 50, math.random(-10, 10))
                        dummy.Anchored = false
                        dummy.BrickColor = BrickColor.Random()
                        dummy.Shape = Enum.PartType.Ball
                        dummy.Name = "NoobBall"
                        dummy.Parent = Workspace

                        game:GetService("Debris"):AddItem(dummy, 5)
                    end)
                end
            end
        end
    end,
})
