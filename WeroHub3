local OrionLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/jensonhirst/Orion/main/source'))()

local Window = OrionLib:MakeWindow({Name = "WeroHub", HidePremium = false, SaveConfig = true, ConfigFolder = "WeroHubConfig"})

local StealTab = Window:MakeTab({
	Name = "Steal a Brainrot",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local selectedBrainrots = {}
local espBrainrotsEnabled = false
local trackedBrainrots = {}

local opciones = {
    "Bombardiro Crocodilo", "Bombombini Gusini", "Cavallo Virtuoso", "Spioniro Golubiro",
    "Tigrulini Watermellini", "Zibra Zubra Zibralini", "Cocofanto Elefanto",
    "Gattatino Nyanino", "Girafa Celestre", "Tralalero Tralala", "Matteo",
    "Espresso Signora", "Odin Din Din Dun", "Trenostruzzo Turbo 3000",
    "Statuino Libertino", "Orcalelo Orcala", "Tigroligre Frutonni", "Ballerino Lololo",
    "La Vaca Saturno Saturnita", "Chimpanzini Spiderini", "Garama And Madungdung",
    "Los Tralaleritos", "Las Tralaleritas", "Graipuss Medussi", "La Grande Combinasion",
    "Tortugini Dragonfruitini", "Pot Hotspot", "Nuclearo Dinosauro"
}

-- Creamos una carpeta para los toggles de Brainrots (opcional, para organizar)
local brainrotFolder = StealTab:AddSection({ Name = "Selecciona Brainrots" })

-- Crea toggles para cada brainrot para seleccionar múltiples
for _, brainrotName in ipairs(opciones) do
    brainrotFolder:AddToggle({
        Name = brainrotName,
        Default = false,
        Callback = function(enabled)
            if enabled then
                selectedBrainrots[brainrotName] = true
            else
                selectedBrainrots[brainrotName] = nil
            end
            print("Seleccionados:", table.concat(table.keys(selectedBrainrots), ", "))
            if espBrainrotsEnabled then
                updateESP()
            end
        end
    })
end

-- Toggle para activar/desactivar ESP
StealTab:AddToggle({
    Name = "ESP Brainrots",
    Default = false,
    Callback = function(value)
        espBrainrotsEnabled = value
        if value then
            updateESP()
        else
            clearESP()
        end
    end
})

-- Función para limpiar ESP
function clearESP()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("Highlight") and v.Name == "BrainrotESP" then
            v:Destroy()
        elseif v:IsA("BillboardGui") and v.Name == "BrainrotName" then
            v:Destroy()
        end
    end
    trackedBrainrots = {}
end

-- Función para actualizar ESP
function updateESP()
    clearESP()
    if not espBrainrotsEnabled then return end

    for _, plot in pairs(workspace:WaitForChild("Plots"):GetChildren()) do
        local animalPodiums = plot:FindFirstChild("AnimalPodiums")
        if animalPodiums then
            for _, descendant in pairs(animalPodiums:GetDescendants()) do
                if descendant:IsA("TextLabel") and descendant.Name == "DisplayName" then
                    local brainrotName = descendant.Text
                    if selectedBrainrots[brainrotName] then
                        local model = descendant:FindFirstAncestorOfClass("Model")
                        if model and not model:FindFirstChild("BrainrotESP") then
                            if not model.PrimaryPart then
                                local primary = model:FindFirstChildWhichIsA("BasePart")
                                if primary then model.PrimaryPart = primary else continue end
                            end

                            -- Highlight
                            local highlight = Instance.new("Highlight")
                            highlight.Name = "BrainrotESP"
                            highlight.FillColor = Color3.fromRGB(255, 255, 0)
                            highlight.OutlineColor = Color3.fromRGB(0, 0, 0)
                            highlight.OutlineTransparency = 0
                            highlight.FillTransparency = 0.5
                            highlight.Adornee = model
                            highlight.Parent = model

                            -- Billboard
                            local billboard = Instance.new("BillboardGui")
                            billboard.Name = "BrainrotName"
                            billboard.Size = UDim2.new(0, 200, 0, 50)
                            billboard.StudsOffset = Vector3.new(0, 3, 0)
                            billboard.AlwaysOnTop = true
                            billboard.Adornee = model.PrimaryPart
                            billboard.Parent = model

                            local label = Instance.new("TextLabel")
                            label.Size = UDim2.new(1, 0, 1, 0)
                            label.BackgroundTransparency = 1
                            label.Text = brainrotName
                            label.TextColor3 = Color3.new(1, 1, 0)
                            label.TextStrokeTransparency = 0
                            label.Font = Enum.Font.GothamBold
                            label.TextScaled = true
                            label.Parent = billboard

                            trackedBrainrots[model] = true

                            model.AncestryChanged:Connect(function(_, parent)
                                if not parent then
                                    if model:FindFirstChild("BrainrotESP") then model.BrainrotESP:Destroy() end
                                    if model:FindFirstChild("BrainrotName") then model.BrainrotName:Destroy() end
                                    trackedBrainrots[model] = nil
                                    print("Se eliminó ESP porque el brainrot fue removido.")
                                end
                            end)
                        end
                    end
                end
            end
        end
    end
end

-- Limpieza automática de modelos eliminados
RunService.Heartbeat:Connect(function()
    if not espBrainrotsEnabled then return end
    for model in pairs(trackedBrainrots) do
        if not model:IsDescendantOf(workspace) then
            if model:FindFirstChild("BrainrotESP") then
                model.BrainrotESP:Destroy()
            end
            if model:FindFirstChild("BrainrotName") then
                model.BrainrotName:Destroy()
            end
            trackedBrainrots[model] = nil
            print("Se eliminó el ESP de un brainrot que ya no existe.")
        end
    end
end)

-- Función auxiliar para obtener keys de tabla (ya que table.keys no existe en Lua estándar)
function table.keys(tbl)
    local keys = {}
    for k in pairs(tbl) do
        table.insert(keys, k)
    end
    return keys
end

local Players = game:GetService("Players")
local player = Players.LocalPlayer

local respawnConnection
local originalJumpPower

StealTab:AddToggle({
    Name = "Jump Boost 100 Bypass",
    Default = false,
    Callback = function(enabled)
        local function applyJumpBoost()
            local char = player.Character
            if not char then return end
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.UseJumpPower = true
                originalJumpPower = originalJumpPower or humanoid.JumpPower
                humanoid.JumpPower = 100
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
            end
        end

        local function removeJumpBoost()
            local char = player.Character
            if not char then return end
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid and originalJumpPower then
                humanoid.JumpPower = originalJumpPower
            end
        end

        if enabled then
            applyJumpBoost()

            -- Reaplicar al respawn
            respawnConnection = player.CharacterAdded:Connect(function(char)
                char:WaitForChild("Humanoid")
                task.wait(0.2)
                applyJumpBoost()
            end)
        else
            removeJumpBoost()

            if respawnConnection then
                respawnConnection:Disconnect()
                respawnConnection = nil
            end
        end
    end
})
