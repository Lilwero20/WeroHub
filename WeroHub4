
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

llocal Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Teleport Fly",
    LoadingTitle = "Teleport Fly",
    LoadingSubtitle = "by ChatGPT",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "TeleportFlyConfig"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = true
    }
})

local Tab = Window:CreateTab("Fly to Player", 4483362458) -- ícono cualquiera

-- Tabla para guardar jugadores y actualizar dropdown
local playerNames = {}

local function updatePlayerNames()
    playerNames = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            table.insert(playerNames, player.Name)
        end
    end
end

updatePlayerNames()

-- Actualizar dropdown cuando un jugador entra o sale
Players.PlayerAdded:Connect(function(player)
    updatePlayerNames()
    dropdown:SetOptions(playerNames)
end)
Players.PlayerRemoving:Connect(function(player)
    updatePlayerNames()
    dropdown:SetOptions(playerNames)
end)

local dropdown = Tab:CreateDropdown({
    Name = "Selecciona un jugador",
    Options = playerNames,
    CurrentOption = playerNames[1] or "",
    Flag = "PlayerSelector",
    Callback = function(option)
        -- Aquí puedes hacer algo si quieres al seleccionar jugador
    end
})

local button = Tab:CreateButton({
    Name = "Volar hacia el jugador",
    Callback = function()
        local targetName = dropdown:Get()
        local targetPlayer = Players:FindFirstChild(targetName)
        local localPlayer = Players.LocalPlayer
        local character = localPlayer.Character
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

        if not humanoidRootPart then
            warn("No se encontró HumanoidRootPart")
            return
        end

        if not targetPlayer or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            warn("Jugador objetivo no válido o sin personaje")
            return
        end

        local targetHRP = targetPlayer.Character.HumanoidRootPart

        -- Subir 10 studs al despegar
        local startPos = humanoidRootPart.Position + Vector3.new(0, 10, 0)
        humanoidRootPart.CFrame = CFrame.new(startPos)

        -- Volar hacia el objetivo
        local flySpeed = 250
        local reached = false

        -- Crear una función para movernos cada frame hacia el objetivo en línea recta
        local connection
        connection = RunService.Heartbeat:Connect(function(deltaTime)
            if not humanoidRootPart or not targetHRP then
                connection:Disconnect()
                return
            end

            local direction = (targetHRP.Position - humanoidRootPart.Position)
            local distance = direction.Magnitude

            if distance < 5 then
                reached = true
            end

            if reached then
                -- Al llegar, bajar 10 studs
                humanoidRootPart.CFrame = CFrame.new(targetHRP.Position - Vector3.new(0,10,0))
                connection:Disconnect()
            else
                local moveVector = direction.Unit * flySpeed * deltaTime
                humanoidRootPart.CFrame = humanoidRootPart.CFrame + moveVector
            end
        end)
    end
