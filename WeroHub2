local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "WeroHub",
    Icon = 89001596756285, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Loading WeroHub",
    LoadingSubtitle = "by Wero",
    Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local TeleportTab = Window:CreateTab("Teleport", 4483362458) -- Title, Image

local Input = TeleportTab:CreateInput({
    Name = "TP to Player",
    CurrentValue = "",
    PlaceholderText = "Input Placeholder",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        local Players = game:GetService("Players")
        local TweenService = game:GetService("TweenService")
        
        local targetPlayerName = Text
        local localPlayer = Players.LocalPlayer
        
        local function flyToPlayer(targetPlayerName)
            local targetPlayer = Players:FindFirstChild(targetPlayerName)
            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
                local character = localPlayer.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    local humanoidRootPart = character.HumanoidRootPart

                    -- Subir 10 studs primero
                    humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 10, 0)

                    -- Volar hacia arriba del jugador (unos 10 studs arriba)
                    local aboveTargetPosition = targetPosition + Vector3.new(0, 10, 0)

                    local distance = (aboveTargetPosition - humanoidRootPart.Position).Magnitude
                    local speed = 250
                    local tweenInfo = TweenInfo.new(distance / speed, Enum.EasingStyle.Linear)
                    local flyTween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(aboveTargetPosition)})
                    flyTween:Play()

                    flyTween.Completed:Connect(function()
                        -- Cuando llegue arriba, bajamos sobre el jugador
                        local descendTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.In)
                        local descendTween = TweenService:Create(humanoidRootPart, descendTweenInfo, {CFrame = CFrame.new(targetPosition)})
                        descendTween:Play()
                    end)
                end
            end
        end
        
        flyToPlayer(targetPlayerName)
    end,
})



 local Toggle = TeleportTab:CreateToggle({
    Name = "Tp to Fruit",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        local Players = game:GetService("Players")
        local TweenService = game:GetService("TweenService")
        local Workspace = game:GetService("Workspace")

        local localPlayer = Players.LocalPlayer

        local function flyToFruit()
            local closestFruit
            local closestDistance = math.huge

            for _, fruit in pairs(Workspace:GetChildren()) do
            if fruit:IsA("Tool") and fruit:FindFirstChild("Handle") then
                local distance = (fruit.Handle.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
                if distance < closestDistance then
                closestDistance = distance
                closestFruit = fruit
                end
            end
            end

            if closestFruit then
            local targetPosition = closestFruit.Handle.Position
            local character = localPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local humanoidRootPart = character.HumanoidRootPart
                local distance = (targetPosition - humanoidRootPart.Position).Magnitude
                local speed = 250
                local tweenInfo = TweenInfo.new(distance / speed, Enum.EasingStyle.Linear)
                local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPosition)})
                tween:Play()
            end
            end
        end

        if Value then
            flyToFruit()
        end
    end,
 })

 
 local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image

 local Toggle = PlayerTab:CreateToggle({
    Name = "Inf Energy",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        local Players = game:GetService("Players")
        local localPlayer = Players.LocalPlayer
        local energyConnection

        if Value then
            energyConnection = localPlayer.Character.Energy.Changed:Connect(function()
            localPlayer.Character.Energy.Value = localPlayer.Character.Energy.MaxValue
            end)
        else
            if energyConnection then
            energyConnection:Disconnect()
            energyConnection = nil
            end
        end
    end,
 })
local Toggle = PlayerTab:CreateToggle({
    Name = "Inf Health",
    CurrentValue = false,
    Flag = "Toggle2", -- Ensure this flag is unique
    Callback = function(Value)
        local Players = game:GetService("Players")
        local localPlayer = Players.LocalPlayer
        local healthConnection

        if Value then
            healthConnection = localPlayer.Character.Humanoid.HealthChanged:Connect(function()
                localPlayer.Character.Humanoid.Health = localPlayer.Character.Humanoid.MaxHealth
            end)
        else
            if healthConnection then
                healthConnection:Disconnect()
                healthConnection = nil
            end
        end
    end,
})

local Toggle = PlayerTab:CreateToggle({
    Name = "Auto Farm",
    CurrentValue = false,
    Flag = "Toggle3", -- Ensure this flag is unique
    Callback = function(Value)
        local Players = game:GetService("Players")
        local TweenService = game:GetService("TweenService")
        local Workspace = game:GetService("Workspace")
        local localPlayer = Players.LocalPlayer
        local autoFarmConnection

        local function autoFarm()
            while Value do
                local closestEnemy
                local closestDistance = math.huge

                for _, enemy in pairs(Workspace.Enemies:GetChildren()) do
                    if enemy:FindFirstChild("HumanoidRootPart") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                        local distance = (enemy.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
                        if distance < closestDistance then
                            closestDistance = distance
                            closestEnemy = enemy
                        end
                    end
                end

                if closestEnemy then
                    local targetPosition = closestEnemy.HumanoidRootPart.Position
                    local character = localPlayer.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        local humanoidRootPart = character.HumanoidRootPart
                        local distance = (targetPosition - humanoidRootPart.Position).Magnitude
                        local speed = 250
                        humanoidRootPart.CFrame = CFrame.new(targetPosition + Vector3.new(0, 10, 0)) -- Fly above the enemy
                        localPlayer.Character:FindFirstChildOfClass("Tool").Handle.Size = Vector3.new(10, 10, 10) -- Increase hitbox size
                        local tweenInfo = TweenInfo.new(distance / speed, Enum.EasingStyle.Linear)
                        local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPosition)})
                        tween:Play()
                        while tween.PlaybackState == Enum.PlaybackState.Playing do
                            localPlayer.Character:FindFirstChildOfClass("Tool"):Activate()
                            wait(0.1)
                        end
                        tween.Completed:Wait()
                        -- Attack the enemy
                        localPlayer.Character:FindFirstChildOfClass("Tool"):Activate()
                    end
                end
                wait(1) -- Adjust the wait time as needed
            end
        end

        if Value then
            autoFarmConnection = game:GetService("RunService").Heartbeat:Connect(autoFarm)
        else
            if autoFarmConnection then
                autoFarmConnection:Disconnect()
                autoFarmConnection = nil
            end
        end
    end,
})

local ScriptsTab = Window:CreateTab("Scripts", 4483362458) -- Title, Image

local Button = ScriptsTab:CreateButton({
    Name = "Infinity yield",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end,
 })

 local Button = ScriptsTab:CreateButton({
    Name = "Dex",
    Callback = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/FeMbE4xS"))()
    end,
 })

local Tab = Window:CreateTab("Música", 4483362458) -- Asegúrate que creas el Tab

-- Crear el objeto de sonido
local Sound = Instance.new("Sound")
Sound.Name = "MusicPlayer"
Sound.Parent = workspace
Sound.Looped = false
Sound.Volume = 1

-- Crear el TextLabel para mostrar la canción actual
local SongNameLabel = Instance.new("TextLabel")
SongNameLabel.Text = "Canción: N/A"
SongNameLabel.Size = UDim2.new(0, 200, 0, 30)
SongNameLabel.Position = UDim2.new(0, 10, 0, 50)
SongNameLabel.Parent = Tab

-- Crear barra de progreso
local ProgressBar = Instance.new("Frame")
ProgressBar.Size = UDim2.new(0, 200, 0, 10)
ProgressBar.Position = UDim2.new(0, 10, 0, 100)
ProgressBar.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
ProgressBar.Parent = Tab

local ProgressBarFill = Instance.new("Frame")
ProgressBarFill.Size = UDim2.new(0, 0, 1, 0)
ProgressBarFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
ProgressBarFill.Parent = ProgressBar

-- Crear input para poner el ID de la canción
local Input = Tab:CreateInput({
    Name = "PlayMusic",
    CurrentValue = "",
    PlaceholderText = "Pon el ID aquí",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        local id = tonumber(Text)
        if id then
            Sound:Stop()
            Sound.SoundId = "rbxassetid://" .. id
            task.wait(0.2) -- Esperamos antes de reproducir
            Sound:Play()

            -- Mostrar nombre de la canción
            SongNameLabel.Text = "Canción: " .. Text
        else
            warn("Texto inválido.")
        end
    end,
})

-- Crear botón para pausar la música
local PauseButton = Tab:CreateButton({
    Name = "Pausar Música",
    Callback = function()
        Sound:Pause()
    end,
})

-- Crear botón para reanudar la música
local ResumeButton = Tab:CreateButton({
    Name = "Reanudar Música",
    Callback = function()
        Sound:Resume()
    end,
})

-- Crear botón para detener la música
local StopButton = Tab:CreateButton({
    Name = "Parar Música",
    Callback = function()
        Sound:Stop()
    end,
})

-- Crear slider para ajustar el volumen
local VolumeSlider = Tab:CreateSlider({
    Name = "Ajustar Volumen",
    Min = 0,
    Max = 1,
    Default = 1,
    Color = Color3.fromRGB(255, 0, 0),
    Increment = 0.05,
    Callback = function(Value)
        Sound.Volume = Value
    end,
})

-- Crear botón para activar/desactivar el loop
local LoopButton = Tab:CreateButton({
    Name = "Activar/Desactivar Loop",
    Callback = function()
        Sound.Looped = not Sound.Looped
        if Sound.Looped then
            print("Loop activado")
        else
            print("Loop desactivado")
        end
    end,
})

-- Actualizar la barra de progreso mientras se reproduce la canción
game:GetService("RunService").Heartbeat:Connect(function()
    if Sound.IsPlaying then
        local progress = Sound.TimePosition / Sound.TimeLength
        ProgressBarFill.Size = UDim2.new(progress, 0, 1, 0)
    end
end)

-- Crear botón para detener todo el sonido
local StopAllButton = Tab:CreateButton({
    Name = "Parar Todo",
    Callback = function()
        for _, obj in pairs(workspace:GetChildren()) do
            if obj:IsA("Sound") then
                obj:Stop()
            end
        end
    end,
})
